name: Blog App CI/CD Pipeline

# Trigger conditions
on:
  push:
    branches: [ main, fa22-bse-181 ]
  pull_request:
    branches: [ main ]

jobs:
  # ===== STAGE 1: BUILD & INSTALL =====
  build:
    name: "üî® Build & Install"
    runs-on: ubuntu-latest
    
    steps:
      # Checkout code
      - name: Checkout Code
        uses: actions/checkout@v3
      
      # Python setup
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      # Install backend dependencies
      - name: Install Backend Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r Blog/requirements.txt
      
      # Node.js setup (For frontend)
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      # Install Frontend dependencies
      - name: Install Frontend Dependencies
        run: |
          cd blog-frontend
          npm install


  # ===== STAGE 2: LINT & SECURITY SCAN =====
  lint-security:
    name: "üîç Lint & Security Scan"
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      # Python code quality check
      - name: Install Linting Tools
        run: |
          pip install flake8 pylint
      
      # Pylint check (Backend)
      - name: Run Pylint on Backend
        run: |
          pylint Blog/Accounts/ Blog/HomeApp/ --exit-zero || true
      
      # Flake8 check (Code style)
      - name: Run Flake8
        run: |
          flake8 Blog/ --count --max-line-length=120 || true
      
      # Frontend linting
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Check Frontend with ESLint
        run: |
          cd blog-frontend
          npm install eslint --save-dev || true
          npm run lint || true


  # ===== STAGE 3: TEST WITH DATABASE =====
  test:
    name: "‚úÖ Test with Database"
    runs-on: ubuntu-latest
    needs: lint-security
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      # Python dependencies
      - name: Install Backend Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r Blog/requirements.txt
      
      # Run Database Migrations (Using Neon)
      - name: Run Database Migrations
        env:
          DATABASE_URL: ${{ secrets.NEON_DATABASE_URL }}
          DEBUG: 'True'
        run: |
          cd Blog
          python manage.py migrate
      
      # Run Django tests
      - name: Run Django Tests
        env:
          DATABASE_URL: ${{ secrets.NEON_DATABASE_URL }}
          DEBUG: 'True'
        run: |
          cd Blog
          python manage.py test Accounts HomeApp --verbosity=2 || true


  # ===== STAGE 4: BUILD & PUSH DOCKER IMAGES =====
  docker-build:
    name: "üê≥ Build & Push Docker Images"
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      
      # Docker setup
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      # Login to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      
      # Backend image build & push
      - name: Build and Push Backend Docker Image
        uses: docker/build-push-action@v4
        with:
          context: ./Blog
          file: ./Blog/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/blog-backend:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/blog-backend:${{ github.sha }}
      
      # Frontend image build & push
      - name: Build and Push Frontend Docker Image
        uses: docker/build-push-action@v4
        with:
          context: ./blog-frontend
          file: ./blog-frontend/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/blog-frontend:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/blog-frontend:${{ github.sha }}


  # ===== STAGE 5: DEPLOY (CONDITIONAL) =====
  deploy:
    name: "üöÄ Deploy to Render"
    runs-on: ubuntu-latest
    needs: docker-build
    # Sirf main branch par deploy karo
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      
      # Deploy Backend to Render
      - name: Deploy Backend to Render
        run: |
          echo "üöÄ Deploying Backend to Render..."
          curl -X POST https://api.render.com/deploy/srv-${{ secrets.RENDER_BACKEND_SERVICE_ID }}?key=${{ secrets.RENDER_API_KEY }}
      
      # Deploy Frontend to Render
      - name: Deploy Frontend to Render
        run: |
          echo "üöÄ Deploying Frontend to Render..."
          curl -X POST https://api.render.com/deploy/srv-${{ secrets.RENDER_FRONTEND_SERVICE_ID }}?key=${{ secrets.RENDER_API_KEY }}
      
      - name: ‚úÖ Deployment Complete
        run: |
          echo "‚úÖ Deployment to Render complete!"
          echo "üìù Backend: https://${{ secrets.RENDER_BACKEND_URL }}"
          echo "üåê Frontend: https://${{ secrets.RENDER_FRONTEND_URL }}"
